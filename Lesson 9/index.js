//Конкатенация строк-соединение строк

// "Hello " + "World"; //"Hello World"

// const hello = "Hello";
// const world = "World";
// const greeting = hello + "" + world;
// console.log(greeting);//Hello world

//Шаблонные строки

const hello = "Hello";
const world = "World";
const greeting = `${hello} ${world}`;
// console.log(greeting);//Hello world

//Автоматическая конвертация типов данных
10 + "sdgsdg"; //'10sdgsdg' конвертация числа в строку
underfined + 12; //NaN
undefined + "12"; //'undefined12'

//Функциональные выражения
// function(a,b) {//тут нет имени функции и сразу идут параметры, они анонимные, нельзя использовать автономно
// 	a = a + 1
// 	c = a + b
// 	return c
// }
//Объявленные функции
// function myFn(a,b) {//тут есть имя функции, а потом идут параметры
// 	a = a + 1
// 	c = a + b
// 	return c
// }
//Функциональные выражения всегда анонимные,не имеют имени и нельзя их использовать автономно,
//им можно присваивать переменную и использовать как аргумент в вызове другой функции
// const myFunction = function(a,b) {//перед знаком = здесь переменная, после = уже функциональное выражение
// 	let c
// 	a = a + 1
// 	c = a + b
// 	return c
// }

// myFunction(5,3)//9

//Объявленная функция имеет имя, ее можно использовать анонимно, можно присваивать
//переменной, можно использовать как аргумент в вызове другой функции

//Функциональное выражение в вызове другой функции
// setTimeout(function() {
// 	console.log('Отложенное сообщение')
// }, 1000)//Отложенное сообщение будет выведено через 1000мс в консоль

//Стрелочная функция всегда анонимна
// (a,b) => {
// 	let c
// 	a = a + 1
// 	c = a + b
// 	return c
// }
//Как дать имя стрелочной функции?

// const myFunction = (a, b) => {
//   let c;
//   a = a + 1;
//   c = a + b;
//   return c;
// };
// myFunction(5, 3); //9

// setTimeout(() => {
//   console.log("Отложенное сообщение");
// }, 1000);

//Сокращения в стрелочных функциях
(a) => {
  //тут круглые скобки можно опустить
  //если тело функции имеет одно выражение
};
(a, b) => a + b;
//Стрелочная функция неявно возвращает результат выражения

//Значения функций по умолчанию
// function multiByFactor(value, multiplier = 1) {
//   return value * multiplier;
// }
// multiByFactor(10, 2); //20
// multiByFactor(5); //5

const newPost = (post, addedAt = Date()) => ({
  //здесь Date() значения по умолчанию вычисляются в момент вызова функции
  //здесь без круглых скобок тело функции, а с ними-объект
  ...post,
  addedAt,
});
const firstPost = {
  id: 1,
  author: "Eugene",
};
newPost(firstPost); //{ id: 1, author: "Eugene", addedAt: "Wed Apr 06 2022 12:26:38 GMT+0300 (за східноєвропейським літнім часом)" }
